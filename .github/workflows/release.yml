name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm test
      
      - name: Build extension
        run: npm run build
      
      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "ðŸ“Œ Version: $VERSION"
      
      - name: Update manifest version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          VERSION_NUMBER="${VERSION#v}"
          node -e "
            const fs = require('fs');
            const manifest = require('./dist/manifest.json');
            manifest.version = '$VERSION_NUMBER';
            fs.writeFileSync('./dist/manifest.json', JSON.stringify(manifest, null, 2));
            console.log('âœ… Manifest version updated to:', manifest.version);
          "
      
      - name: Package extension
        run: |
          cd dist
          zip -r ../tts-chrome-extension-${{ steps.version.outputs.version }}.zip *
          cd ..
          echo "ðŸ“¦ Extension packaged for release"
      
      - name: Generate changelog
        id: changelog
        run: |
          echo "# Changelog" > CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "## ${{ steps.version.outputs.version }} - Initial Release" >> CHANGELOG_TEMP.md
            git log --pretty=format:"- %s (%h)" >> CHANGELOG_TEMP.md
          else
            echo "## ${{ steps.version.outputs.version }}" >> CHANGELOG_TEMP.md
            git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" >> CHANGELOG_TEMP.md
          fi
          
          echo "" >> CHANGELOG_TEMP.md
          cat CHANGELOG_TEMP.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: TTS Chrome Extension ${{ steps.version.outputs.version }}
          body_path: CHANGELOG_TEMP.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-beta') || contains(steps.version.outputs.version, '-alpha') }}
          files: |
            tts-chrome-extension-${{ steps.version.outputs.version }}.zip
      
      - name: Upload release metrics
        run: |
          FILE_SIZE=$(du -h tts-chrome-extension-${{ steps.version.outputs.version }}.zip | cut -f1)
          echo "ðŸ“Š Release Metrics:"
          echo "- Version: ${{ steps.version.outputs.version }}"
          echo "- File Size: $FILE_SIZE"
          echo "- Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "- Commit: ${{ github.sha }}"
  
  publish-notification:
    name: Publish Notification
    runs-on: ubuntu-latest
    needs: create-release
    
    steps:
      - name: Send release notification
        run: |
          echo "ðŸŽ‰ New release published!"
          echo "Version: ${{ github.ref_name }}"
          echo "Download: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
          echo ""
          echo "Next steps:"
          echo "1. Test the extension package"
          echo "2. Upload to Chrome Web Store (manual)"
          echo "3. Update documentation"
          echo "4. Announce the release"