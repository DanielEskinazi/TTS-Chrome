name: CI Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run linter
        run: npm run lint
      
      - name: Run formatter check
        run: npm run format:check || npm run format
      
      - name: Run type checking
        run: npm run typecheck
      
      - name: Run tests with coverage
        run: npm test -- --coverage --ci
      
      - name: Upload coverage reports
        if: matrix.node-version == '20.x'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
      
      - name: Build extension
        run: npm run build
      
      - name: Validate manifest
        run: |
          if [ -f dist/manifest.json ]; then
            node -e "
              const manifest = require('./dist/manifest.json');
              console.log('Manifest version:', manifest.version);
              console.log('Manifest name:', manifest.name);
              if (!manifest.manifest_version || manifest.manifest_version !== 3) {
                throw new Error('Invalid manifest version');
              }
              console.log('‚úÖ Manifest validation passed');
            "
          else
            echo "‚ùå Manifest file not found"
            exit 1
          fi
      
      - name: Check bundle size
        run: |
          echo "üì¶ Extension size report:"
          find dist -name "*.js" -o -name "*.css" | xargs du -h | sort -h
          TOTAL_SIZE=$(du -sh dist | cut -f1)
          echo "Total size: $TOTAL_SIZE"
      
      - name: Package extension
        run: |
          cd dist
          zip -r ../tts-chrome-extension.zip *
          cd ..
          echo "üì¶ Extension packaged successfully"
      
      - name: Upload extension artifact
        if: matrix.node-version == '20.x'
        uses: actions/upload-artifact@v4
        with:
          name: tts-chrome-extension-${{ github.sha }}
          path: tts-chrome-extension.zip
          retention-days: 7
  
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Check for circular dependencies
        run: npx madge --circular src/
      
      - name: Check for unused dependencies
        run: npx depcheck --ignores="@types/*"
      
      - name: License compliance check
        run: npx license-checker --production --summary
  
  pr-comment:
    name: PR Status Comment
    runs-on: ubuntu-latest
    needs: [build-and-test, code-quality]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const message = `## ‚úÖ CI Pipeline Status
            
            All checks have passed successfully!
            
            - üß™ Tests: Passed on Node.js 18.x and 20.x
            - üìù Linting: No issues found
            - üîç Type checking: No errors
            - üì¶ Build: Extension packaged successfully
            - üîí Security: All checks passed
            
            View the [workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more details.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: message
            });